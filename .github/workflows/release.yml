name: Release
on: workflow_dispatch
jobs:
  plan-release:
    name: Plan Release
    runs-on: ubuntu-latest
    outputs:
      release-level: ${{ steps.determine-release-level.outputs.release-level }}
      release-notes: "${{ steps.extract-release-notes.outputs.release-notes }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract Release Notes
        id: extract-release-notes
        uses: ./.github/actions/extract-release-notes
      - name: Determine Release Level
        id: determine-release-level
        uses: ./.github/actions/determine-release-level
        with:
          release-notes: "${{ steps.extract-release-notes.outputs.release-notes }}"
  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-branch-name: ${{ steps.determine-release-branch.outputs.release-branch-name }}
      release-tag-name: ${{ steps.get-latest-tag-name.outputs.latest-tag-name }}
      release-version: ${{ steps.get-release-version.outputs.release-version }}
    needs: plan-release
    if: needs.plan-release.outputs.release-level != 'none'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          ssh-key: "${{ secrets.RELEASE_DEPLOY_KEY }}"
      - name: Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Cargo Release
        run: cargo install cargo-release
      - name: Configure GPG and Git
        uses: ./.github/actions/configure-gpg-and-git
        with:
          git-user-email: "${{ vars.GIT_USER_EMAIL }}"
          git-user-name: "${{ vars.GIT_USER_NAME }}"
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          gpg-private-key: "${{ secrets.GPG_PRIVATE_KEY }}"
      - name: Increment Version
        run: |
          cargo release ${{ needs.plan-release.outputs.release-level }} \
            --allow-branch main \
            --execute \
            --no-confirm \
            --no-push \
            --no-verify \
            --sign
      - name: Get Latest Tag Name
        id: get-latest-tag-name
        run: |
          TAG=$(git describe --abbrev=0)
          echo "latest-tag-name=$TAG" >> "$GITHUB_OUTPUT"
      - name: Get Release Version
        id: get-release-version
        run: |
          TAG=${{ steps.get-latest-tag-name.outputs.latest-tag-name }}
          RELEASE_VERSION="${TAG#v}"
          echo "release-version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
      - name: Determine Release Branch
        id: determine-release-branch
        run: |
          RELEASE_VERSION=${{ steps.get-release-version.outputs.release-version }}
          RELEASE_BRANCH_NAME="release/${{ steps.get-release-version.outputs.release-version }}"
          echo "release-branch-name=$RELEASE_BRANCH_NAME" >> "$GITHUB_OUTPUT"
      - name: Create Release Branch
        run: |
          git checkout -b \
            ${{ steps.determine-release-branch.outputs.release-branch-name }} \
            main
      - name: Push Release Branch
        run: |
          git push origin \
          ${{ steps.determine-release-branch.outputs.release-branch-name }}
  continuous-integration:
    name: Continuous Integration
    needs: create-release-branch
    uses: ./.github/workflows/continuous-integration.yml
    with:
      branch-name: ${{ needs.create-release-branch.outputs.release-branch-name }}
      release: true
  package:
    name: Package ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    needs:
      - continuous-integration
      - create-release-branch
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: Linux AMD64
            runner: ubuntu-latest
            archive-ext: tar.gz
            artifact-name: linux-amd64
          - name: Linux ARM64
            runner: ubuntu-latest
            archive-ext: tar.gz
            artifact-name: linux-arm64
          - name: macOS AMD64
            runner: macos-latest
            archive-ext: tar.gz
            artifact-name: macos-amd64
          - name: macOS ARM64
            runner: macos-latest
            archive-ext: tar.gz
            artifact-name: macos-arm64
          - name: Windows AMD64
            runner: windows-latest
            archive-ext: zip
            artifact-name: windows-amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.release-branch-name }}
      - name: Determine Archive Name
        id: determine-archive-name
        run: |
          ARCHIVE_FILE_NAME="eoclu-${{ needs.create-release-branch.outputs.release-tag-name }}-${{ matrix.artifact-name }}.${{ matrix.archive-ext }}"
          echo "archive-file-name=$ARCHIVE_FILE_NAME" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Download Build Artifact
        id: download-build-artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ needs.continuous-integration.outputs.run-id }}
          name: ${{ matrix.artifact-name }}
      - name: Package Unix
        if: matrix.runner != 'windows-latest'
        run: |
          mkdir dist
          cp ${{ steps.download-build-artifact.outputs.download-path }}/${{ matrix.artifact-name }}/eoclu dist/
          cp CHANGELOG.md LICENSE-* README.md dist/
          tar -czvf "${{ steps.determine-archive-name.outputs.archive-file-name }}" \
            -C dist .
      - name: Package Windows
        if: matrix.runner == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Path dist
          Copy-Item -Path ${{ steps.download-build-artifact.outputs.download-path }}\${{ matrix.artifact-name }}\eoclu.exe -Destination dist\
          Get-ChildItem -Path LICENSE-* | Copy-Item -Destination dist\
          Copy-Item -Path CHANGELOG.md -Destination dist\
          Copy-Item -Path README.md -Destination dist\
          Compress-Archive -Path dist\* -DestinationPath "${{ steps.determine-archive-name.outputs.archive-file-name }}"
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ matrix.artifact-name }}
          overwrite: true
          path: ${{ steps.determine-archive-name.outputs.archive-file-name }}
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      contents: write
      id-token: write
    needs:
      - create-release-branch
      - package
      - plan-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          ssh-key: "${{ secrets.RELEASE_DEPLOY_KEY }}"
      - name: Download Packages
        id: download-packages
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./packages/
      - name: Determine Release Prefix
        id: determine-release-prefix
        run: |
          RELEASE_PREFIX="eoclu-${{ needs.create-release-branch.outputs.release-tag-name }}"
          echo "release-prefix=$RELEASE_PREFIX" >> "$GITHUB_OUTPUT"
      - name: Create Checksum File
        run: shasum -a 256 eoclu-${{ needs.create-release-branch.outputs.release-tag-name }}-* > ${{ steps.determine-release-prefix.outputs.release-prefix }}-checksums.sha256
        working-directory: ./packages
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            ./packages/*-checksums.sha256
            ./packages/*.tar.gz
            ./packages/*.zip
      - name: Configure GPG and Git
        uses: ./.github/actions/configure-gpg-and-git
        with:
          git-user-email: "${{ vars.GIT_USER_EMAIL }}"
          git-user-name: "${{ vars.GIT_USER_NAME }}"
          gpg-passphrase: "${{ secrets.GPG_PASSPHRASE }}"
          gpg-private-key: "${{ secrets.GPG_PRIVATE_KEY }}"
      - name: Fetch Release Branch
        run: git fetch origin ${{ needs.create-release-branch.outputs.release-branch-name }}
      - name: Merge Release Branch
        run: git merge ${{ needs.create-release-branch.outputs.release-branch-name }} --ff-only
      - name: Create Tag
        run: |
          git tag --sign ${{ needs.create-release-branch.outputs.release-tag-name }} \
          --message="Version ${{ needs.create-release-branch.outputs.release-version }}"
      - name: Push Main Branch
        run: git push
      - name: Push Tag
        run: git push origin ${{ needs.create-release-branch.outputs.release-tag-name }}
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "${{ needs.plan-release.outputs.release-notes }}"
          discussion_category_name: Releases
          fail_on_unmatched_files: true
          files: ./packages/*
          generate_release_notes: true
          name: ${{ needs.create-release-branch.outputs.release-version }}
          preserve_order: true
          tag_name: ${{ needs.create-release-branch.outputs.release-tag-name }}
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always()
    needs:
      - create-release-branch
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          ssh-key: "${{ secrets.RELEASE_DEPLOY_KEY }}"
      - name: Delete Release Branch
        if: needs.create-release-branch.result == 'success'
        run: |
          git push origin --delete \
            ${{ needs.create-release-branch.outputs.release-branch-name }}
