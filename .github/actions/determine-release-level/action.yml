name: Determine Release Level
description: |
  Determines the most significant release level by reading release notes.
inputs:
  release-notes:
    description: Release notes from which to determine the release level.
    required: true
outputs:
  release-level:
    description: Most significant release level based on the release notes.
    value: ${{ steps.determine-release-level.outputs.release-level }}
runs:
  using: composite
  steps:
    - name: Determine Release Level
      id: determine-release-level
      run: |
        RELEASE_NOTES='${{ inputs.release-notes }}'
        RELEASE_LEVEL="none"

        if grep -q '\*\*BREAKING\*\*:' <<< "$RELEASE_NOTES"; then
          RELEASE_LEVEL="major"
        elif grep -q '^### \(Added\|Deprecated\)' <<< "$RELEASE_NOTES"; then
          RELEASE_LEVEL="minor"
        elif grep -q '^### \(Changed\|Fixed\|Removed\|Security\)' <<< "$RELEASE_NOTES"; then
          RELEASE_LEVEL="patch"
        fi

        echo "release-level=$RELEASE_LEVEL" >> "$GITHUB_OUTPUT"
      shell: bash
